name: Build and Publish

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '7.0.x'  # Replace with the desired .NET version

      - name: Restore NuGet Packages
        run: dotnet restore

      - name: Build and Publish for Windows
        run: dotnet publish -c Release --self-contained true -r win-x64 --output ./Release/windows-x64 --framework net7.0 /p:PublishSingleFile=true /p:PublishTrimmed=true

      - name: Build and Publish for Linux x64
        run: dotnet publish -c Release --self-contained true -r linux-x64 --output ./Release/linux-x64 --framework net7.0 /p:PublishSingleFile=true /p:PublishTrimmed=true

      - name: Build and Publish for Linux ARM
        run: dotnet publish -c Release --self-contained true -r linux-arm --output ./Release/linux-arm --framework net7.0 /p:PublishSingleFile=true /p:PublishTrimmed=true

      - name: Build and Publish for macOS
        run: dotnet publish -c Release --self-contained true -r osx-x64 --output ./Release/macos-x64 --framework net7.0 /p:PublishSingleFile=true /p:PublishTrimmed=true

      - name: Build and Publish for macOS ARM
        run: dotnet publish -c Release --self-contained true -r osx-arm64 --output ./Release/macos-arm64 --framework net7.0 /p:PublishSingleFile=true /p:PublishTrimmed=true

      - name: Remove Existing Zip Directories
        run: rm -rf ./Notes/Release/*.zip

      - name: Zip Directories
        run: |
          cd ./Notes/Release
          find . -type d -exec zip -r {}.zip {} \;
          cd ../..

      - name: Get Releases
        id: get_releases
        uses: actions/github-script@v4
        with:
          script: |
            const response = await github.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            console.log(response.data[0].upload_url);
            core.setOutput("upload_url", response.data[0].upload_url)

      - name: Upload Release Assets
        run: |
          cd ./Notes/Release
          for file in *.zip; do
            echo "Uploading $file..."
            curl -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/zip" \
              --data-binary "@$file" \
              "${{ steps.get_releases.outputs.upload_url }}?name=$file"
          done
In this modified workflow:

The Zip Directories step remains the same, creating individual zip files for each directory in ./Notes/Release.
The Upload Release Assets step has been added to upload each zip file individually using the curl command and the GitHub API.
The curl command sends a separate HTTP POST request for each zip file, using the secrets.GITHUB_TOKEN for authentication.
Please note that this approach uses the curl command-line tool to perform the upload manually. You may need to install curl if it is not available by default in your GitHub Actions environment.

Make sure to adjust the workflow according to your needs, and test it thoroughly to ensure it meets your requirements.





User
what is the secrets.Github_token?
ChatGPT
secrets.GITHUB_TOKEN is a secret token provided by GitHub Actions that authenticates the workflow run and allows access to the repository and its resources. It is automatically generated and available as an environment variable within the workflow.

The secrets.GITHUB_TOKEN is a special token that grants limited permissions to perform actions within the repository, such as creating releases, adding release assets, commenting on pull requests, etc. It is scoped to the repository and can only be used within the context of the workflow.

When using the secrets.GITHUB_TOKEN, you don't need to explicitly provide any authentication information or tokens. GitHub automatically injects and manages the token for you.

In the provided example, the secrets.GITHUB_TOKEN is used in the Upload Release Assets step to authenticate the curl command and allow the upload of release assets to the GitHub release.

Please note that the secrets.GITHUB_TOKEN is automatically generated and managed by GitHub. It is a secure way to authenticate actions within the workflow without exposing any sensitive credentials.






